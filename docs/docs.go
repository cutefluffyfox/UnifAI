// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag/v2"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},"swagger":"2.0","info":{"description":"{{escape .Description}}","title":"{{.Title}}","contact":{},"version":"{{.Version}}"},"host":"{{.Host}}","basePath":"{{.BasePath}}","paths":{"/auth/login":{"post":{"description":"Obtain token pairs with username and plaintext password","consumes":["application/json"],"produces":["application/json"],"tags":["auth"],"summary":"Log into existing user account","parameters":[{"description":"Username","name":"userDetails","in":"body","required":true,"schema":{"$ref":"#/definitions/entity.UserDetails"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/service.TokenDetails"}},"400":{"description":"Bad Request","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"500":{"description":"Internal Server Error","schema":{"$ref":"#/definitions/httputil.HTTPError"}}}}},"/auth/refresh":{"post":{"security":[{"BearerRefresh":[]}],"description":"Obtain token pair with valid refresh token","produces":["application/json"],"tags":["auth"],"summary":"Refresh token pair","responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/service.TokenDetails"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"500":{"description":"Internal Server Error","schema":{"$ref":"#/definitions/httputil.HTTPError"}}}}},"/auth/register":{"post":{"description":"Register new user with username and plaintext password","consumes":["application/json"],"produces":["application/json"],"tags":["auth"],"summary":"Register new user","parameters":[{"description":"Username","name":"userDetails","in":"body","required":true,"schema":{"$ref":"#/definitions/entity.UserDetails"}}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/service.TokenDetails"}},"400":{"description":"Bad Request","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"500":{"description":"Internal Server Error","schema":{"$ref":"#/definitions/httputil.HTTPError"}}}}},"/user/audio":{"post":{"security":[{"BearerAccess":[]}],"description":"Register new user with username and plaintext password","consumes":["multipart/form-data"],"produces":["application/json"],"tags":["user"],"summary":"Upload voice recording for current user","parameters":[{"type":"file","description":"Audio recording","name":"audio","in":"formData","required":true}],"responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/controller.Message"}},"400":{"description":"Bad Request","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"500":{"description":"Internal Server Error","schema":{"$ref":"#/definitions/httputil.HTTPError"}}}}},"/user/audio/{id}":{"get":{"security":[{"BearerAccess":[]}],"description":"Register new user with username and plaintext password","produces":["multipart/form-data","application/json"],"tags":["user"],"summary":"Get voice recording for user","parameters":[{"type":"integer","description":"User id","name":"id","in":"path","required":true}],"responses":{"200":{"description":"OK","schema":{"type":"file"}},"400":{"description":"Bad Request","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"500":{"description":"Internal Server Error","schema":{"$ref":"#/definitions/httputil.HTTPError"}}}}},"/user/me":{"get":{"security":[{"BearerAccess":[]}],"description":"Get id, username and password hash for logged in user","produces":["application/json"],"tags":["user"],"summary":"DEBUG ONLY: Get user info","responses":{"200":{"description":"OK","schema":{"$ref":"#/definitions/entity.User"}},"401":{"description":"Unauthorized","schema":{"$ref":"#/definitions/httputil.HTTPError"}},"500":{"description":"Internal Server Error","schema":{"$ref":"#/definitions/httputil.HTTPError"}}}}}},"definitions":{"controller.Message":{"type":"object","properties":{"message":{"type":"string"}}},"entity.User":{"type":"object","required":["passhash","username"],"properties":{"id":{"type":"integer"},"passhash":{"type":"string"},"username":{"type":"string"}}},"entity.UserDetails":{"type":"object","required":["password","username"],"properties":{"password":{"type":"string"},"username":{"type":"string"}}},"httputil.HTTPError":{"type":"object","properties":{"code":{"type":"integer","example":400},"message":{"type":"string","example":"status bad request"}}},"service.TokenDetails":{"type":"object","properties":{"access_token":{"type":"string"},"refresh_token":{"type":"string"}}}},"securityDefinitions":{"BearerAccess":{"description":"Type \"Bearer\" followed by a space and JWT Acess token.","type":"apiKey","name":"Authorization","in":"header"},"BearerRefresh":{"description":"Type \"Bearer\" followed by a space and JWT Refresh token.","type":"apiKey","name":"Authorization","in":"header"}}}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "UnifAI API",
	Description:      "WIP UnifAI API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
